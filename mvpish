import random
from cmu_graphics import *
# from PIL import Image
# import os, pathlib


#objects
class objects:
  def __init__(self):
    #normal objects
    self.hammer = 0
    self.wrench = None
    self.rock = None
    self.convLens = None
    self.concLens = None
    self.Dtreat = None
    self.normItemsList = [self.hammer,self.wrench,self.rock,self.convLens,self.concLens,self.Dtreat]
    self.silverKey = 0
    self.bronzeKey = None
    self.peices = []
    self.goldKey = None
    self.tracker = None
    self.secretItemsList = [self.silverKey,self.bronzeKey,self.peices,self.goldKey,self.tracker]

  #there are 6 normal objects and 4 secret objects(with an additional 5 peices you need to find)
  def placeSecretObjects(self):
    peices = []
    itemDict = {'silverKey':0,'bronzeKey':0,'peices':None,'goldKey':0,'tracker':0}
    possibleNums = list(range(9))
    #giving each item a random position 0-9, representing a spot 
    for item in itemDict:
      if item == 'peices':
        toAdd = []
        for _ in range(5):
            number = choice(possibleNums)
            toAdd.append(number)
            possibleNums.remove(number)
        itemDict['peices'] = toAdd
      else:
        #random.choice function source: https://www.w3schools.com/python/ref_random_choice.asp
        number = choice(possibleNums)
        itemDict[item] = number
        possibleNums.remove(number)
    self.peices = itemDict['peices']
    self.silverKey = itemDict['silverKey']
    self.bronzeKey = itemDict['bronzeKey']
    self.goldKey = itemDict['goldKey']
    self.tracker = itemDict['tracker']
  def placeNormObjects(self):
    self.itemDict = {'hammer':0,'wrench':0,'rock':0,'convLens':0,'concLens':0,'Dtreat':0}
    possibleNums = list(range(6))
    #giving each item a random position 0-6, representing a spot 
    for item in self.itemDict:
      number = choice(possibleNums)
      self.itemDict[item] = number
      possibleNums.remove(number)
    self.hammer = self.itemDict['hammer']
    self.wrench = self.itemDict['wrench']
    self.rock = self.itemDict['rock']
    self.convLens = self.itemDict['convLens']
    self.concLens = self.itemDict['concLens']
    self.Dtreat = self.itemDict['Dtreat']
  def allNorms(self):
     return self.itemDict

class playerhehe:
   def __init__(self):
      self.itemsStored = []
      self.peicesStored = []

   def pickup(self,item):
      self.itemsStored.append(item)
   
   def holdItem(self, item):
      self.itemHeld = item

   def releaseItem(self):
      self.itemHeld = None

   def itemHeld(self):
      return self.itemHeld
   
   def giveInventory(self):
      return self.itemsStored 

   def useItem(self,item,location):
      # if item == app.dogTreat:
      #    if location == 
      pass
   pass

def createMap():
  theMap = [[0,0,0],
            [0,0,0],
            [0,0,0]] #(empty), 9 cells total
  # the numbered positions for reference are: 
  mapNumRef = [[0,1,2],
               [3,4,5],
               [6,7,8]]
  theOptions = list(range(8))
  count = 6 
  rows = 2
  cols = 2
  tries = 0
  while count > 0:
    place = choice(theOptions)
    if place == 0:
      row = 0
      col = 0
    elif place%3 == 0:
        row = (place//3)
        col = place-(place//3)*3
    else:
        row =place//3
        col = (place)-(place//3)*3
    theMap[row][col] = 1
    check = []
    # (row+1,col), (row+1,col+1), (row+1,col-1), (row,col+1),(row,col-1),(row-1,col),(row-1,col-1),(row-1,col+2)
    if count >= 3:
       check = [1]
    else:
        for i in range(3):
           if i == 1:
              continue
           if 0<= (col-1 + i) <= cols:
                if theMap[row][col-1 + i] == 1:
                    check.append(1)
           if 0<= (row-1+i) <= rows:
                if theMap[row-1 +i][col] ==1:
                    check.append(1)
           else:
             continue
    if len(check) >= 1 and count > 2:
       count -=1
       theOptions.remove(place)
    #so that at least two of the rooms are connected to two other rooms 
    elif count <= 2 and len(check) >=2:
       count -=1
       theOptions.remove(place)
    #since this map below and its mirror wouldn't be ideal to evade the enemy   
    elif count ==1:
       theMap[row][col] = 0
    elif tries >= 20:
        theMap = [[0,0,0],[0,0,0],[0,0,0]]
        count = 6
        theOptions = list(range(8))
    else:
       theMap[row][col] = 0
       tries +=1 
  return theMap

def defineMap(map):
   #notes: room1 = secret room, room 2 = kitchen, room 3 = bedroom 1, room 4 = bedroom 2
   #room 5 = study, room 6 = living room
   theOptions = list(range(7))
   theOptions.remove(0)
   for row in range(3):
      for col in range(3):
         if map[row][col] == 1:
            place = choice(theOptions)
            map[row][col] = place
            theOptions.remove(place)
   return map
            
class Enemy:
    #when game starts, the enemy is in the secret room
    def __init__(self,map):
       self.Epath = []
       self.map = map
       for i in range(3):
          for j in range(3):
             if map[i][j] == 1:
                self.Erow = i
                self.Ecol = j
       for i in range(3):
          for j in range(3):
             if i != self.Erow and j != self.Ecol:
                #placing player randomly where the enemy isn't at
                if map[i][j] != 0:
                   self.Prow = i
                   self.Pcol = j  
        
    def placement(self):
       return([[self.Prow,self.Pcol],[self.Erow,self.Ecol]])
    def playerMove(self,currSide,map,Prow,Pcol):
       #A=top, B= left, C=back,D=right
       if currSide == 'A':
          newRow = Prow-1
          if 0<= newRow < 3:
             if map[newRow][Pcol] != 0:
                return (newRow,Pcol)
          else:
             return (Prow,Pcol)
       elif currSide == 'B':
          newCol = Pcol-1
          if 0 <= newCol<3:
             if map[Prow][newCol] != 0:
                return (Prow,newCol)
          else:
             return (Prow,Pcol)
       elif currSide == 'C':
          newRow = Prow +1  
          if 0<=newRow < 3:
             if map[newRow][Pcol] != 0:
                return (newRow,Pcol)
          else:
             return (Prow,Pcol)
       elif currSide == 'D':
          newCol = Pcol +1
          if 0<=newCol < 3:
             if map[Prow][newCol] != 0:
                return (Prow,newCol)
          else:
             return (Prow,Pcol)
       return (Prow,Pcol)
          
          
#sanity bar, distraction  
#
    def enemyMove(self):
       return enemyMoves(self.map,self.Erow,self.Ecol,self.Prow,self.Pcol,[])
def enemyMoves(map,Erow,Ecol,Prow,Pcol,path):
   possibleMoves = [[0,1],[0,-1],[-1,0],[1,0]]
   if Erow == Prow and Ecol== Pcol:
      return path 
   else:
      for move in possibleMoves:
         Erow+=move[0]
         Ecol+=move[1]
         if isLegalE(map,Erow,Ecol):
            if [Erow,Ecol] not in path:
               path+=[[Erow,Ecol]]
               solution = enemyMoves(map,Erow,Ecol,Prow,Pcol,path)
               if solution != None:
                  return path
               path.pop()
         Erow-=move[0]
         Ecol-=move[1]
      return None
def isLegalE(map,Erow,Ecol):
   if 0<= Erow <=2 and 0<=Ecol<=2:
      if map[Erow][Ecol] != 0:
         return True
   else:
      return False  
def checkGameOver(Erow,Ecol,Prow,Pcol):
   if Erow == Prow:
      if Ecol == Pcol:
         return True
   else:
      return False
##### tests ######
# tempMap = createMap()
# print(tempMap)
# map = defineMap(tempMap)
# theRun = objects()
# theRun.placeNormObjects()
# theRun.placeSecretObjects()
# print(theRun.peices)

#room graphics :,)
#living room 

#main graphics control
def onAppStart(app):
   restartAll(app)
def restartAll(app):
   #for random generation below
   # tempMap = createMap()
   # realMap = defineMap(tempMap)
   # print(realMap)
   app.map = [[1,2,3],[4,6,5],[0,0,0]]
   app.player = playerhehe()
   app.yuh = Enemy(app.map)
   app.Epath = app.yuh.enemyMove()
   print(app.Epath)
   app.Prow = -1
   app.Pcol = -1
   (app.Prow,app.Pcol) = app.yuh.placement()[0] 
   (app.Erow,app.Ecol) = app.yuh.placement()[1]
   app.objects = objects()
   app.objects.placeSecretObjects()
   app.objects.placeNormObjects()
   app.allNorms = app.objects.allNorms()
   app.player = playerhehe()

   #initialized things
   app.tracker = True
   app.haveLens = False
   app.lensChoice = 'none'
   app.objectChoice = None
   
   #game over tings
   app.gameOver = False
    
   #initialized graphics - source  for creating graphics with images = hack112 project
   #rooms
   #source for all room outlines: https://helloartsy.com/one-point-perspective/
   #loc 1
   app.loc1_secRoom_A = 'loc1_sideA_trash.png'
   app.loc1_secRoom_B = 'loc1_sideB_portraits.png'
   app.loc1_secRoom_C = 'loc1_sideC_meassage3.png'
   app.loc1_secRoom_D = 'loc1_sideD_door.png'
   #loc 2
   app.loc2_kitchen_A = 'loc2_sideA_shelvsa.png'
   app.loc2_kitchen_B = 'loc2_sideB_table2.png'
   app.loc2_kitchen_C = 'loc2_sideC_boards3.png'
   app.loc2_kitchen_D = 'loc2_sideD_sink.png'
   #loc 3
   app.loc3_bedroom1_A = 'loc3_sideA_windoe.png'
   app.loc3_bedroom1_B = 'loc3_sideB_safe2.png'
   app.loc3_bedroom1_C = 'loc3_sideC_bed.png'
   app.loc3_bedroom1_D = 'loc3_sideD_shelfs.png'
   #loc 4
   app.loc4_bedroom2_A = 'loc4_sideA_goldb.png'
   app.loc4_bedroom2_B = 'loc4_sideB_bed2.png'
   app.loc4_bedroom2_C = 'loc4_sideC_doggie2.png'
   app.loc4_bedroom2_D = 'loc4_sideD_windows.png'
   #loc 5
   app.loc5_study_A = 'loc5_sideA_workoutoo2.png'
   app.loc5_study_B = 'loc5_sideB_shelvz.png'
   app.loc5_study_C = 'loc5_sideC_shelves.png'
   app.loc5_study_D = 'loc5_sideD_desk.png'
   #loc 6
      #sources: https://www.textures4photoshop.com/tex/paint-stains-and-splatter/sketch-mask-texture-with-transparent-background.aspx
   app.loc6_livingRoom_A = 'loc4_sideA_scribbles4.png' #should say loc6 lol
   app.loc6_livingRoom_B = 'loc6_sideB_couches5.png'
   app.loc6_livingRoom_C = 'loc6_sideC_doghouse.png'
   app.loc6_livingRoom_D = 'loc6_sideD_TV2.png'

   app.totalMap = ([[app.loc1_secRoom_A,app.loc1_secRoom_B,app.loc1_secRoom_C,app.loc1_secRoom_D],
                     [app.loc6_livingRoom_A,app.loc6_livingRoom_B,app.loc6_livingRoom_C,app.loc6_livingRoom_D],
                     [app.loc5_study_D,app.loc5_study_C,app.loc5_study_B,app.loc5_study_A],
                     [app.loc4_bedroom2_A,app.loc4_bedroom2_B,app.loc4_bedroom2_C,app.loc4_bedroom2_D],
                     [app.loc3_bedroom1_A,app.loc3_bedroom1_B,app.loc3_bedroom1_C,app.loc3_bedroom1_D],
                     [app.loc2_kitchen_A,app.loc2_kitchen_B,app.loc2_kitchen_C,app.loc2_kitchen_D]])
   #clickable items in room
    #normal items
   app.hammer = ['hammer-drawing-9269.png',840,480,80,50]
   app.wrench = ['adjustable-wrench-or-spanner-illustration-png.png',370,350,60,50]
   app.rock = ['kisscc0-rock-download-drawing-ilmenskie-rock-dull-bg2-5b74c65b802588.7648200315343796115249.png',173,356,50,40]
   app.convLens = ['convv lens.png',1050,500,30,50]
   app.concLens = ['conccccc.png',840,480,30,50]
   app.Dtreat = ['5793514.png',840,100,50,50]
   
   #secret items
   app.piece1 = ['Screen Shot 2023-04-20 at 9.23.22 PM.png',200,400,50,50]

   #sanity metric 
   app.playerSanity = 100
   app.timeCount = 0
   placingSanityThings(app)

   #objects in each room
   objectsInEachRoom(app)
   #inventory tings
   app.showInv = False
   #positions
   app.Plocation = app.map[app.Prow][app.Pcol]
   app.Elocation = app.map[app.Erow][app.Ecol]
   app.currSide = 'A'
   app.see = locationToSee(app,app.Plocation,None,app.currSide)
   objectsInRoom(app)
   if doorThere(app,app.map,app.Prow,app.Pcol,app.currSide):
      app.doorThere = True
   else:
      app.doorThere = False

def objectsInEachRoom(app):
   print(app.allNorms)
   theDic=app.allNorms
   for key in theDic:
      #checking what object it is
      if key == 'hammer':
         object = app.hammer
      elif key == 'wrench':
         object = app.wrench
      elif key == 'rock':
         object = app.rock
      elif key == 'convLens':
         object = app.convLens
      elif key == 'concLens':
         object = app.concLens
      elif key == 'Dtreat':
         object = app.Dtreat
      app.loc4CObjects = []
      #adding it to the correct place based on its val in the dict
      if theDic[key]==0:
         app.loc3CObjects = [object]
         object[1]=300
         object[2]=550
      elif theDic[key] == 1:
         app.loc5DObjects = [object]
         object[1]=173
         object[2]=356
      elif theDic[key] == 2:
         app.loc5BObjects = [object]
         object[1]=370
         object[2]=350
      elif theDic[key]== 3:
         app.loc3DObjects = [object]
         object[1]=800
         object[2]=200
      elif theDic[key] ==4:
         app.loc4AObjects = [object]
         object[1]=840
         object[2]=480
      elif theDic[key]== 5:
         app.loc2DObjects = [object]
         object[1]=460
         object[2]=400
def placingSanityThings(app):
   #want 10 sanity increasing things randomly in any room 
   
   #obj1
   row = choice(range(5))
   col = choice(range(3))
   app.SO1Place = app.totalMap[row][col]
   px = choice(range(200,900))
   py= choice(range(200,900))
   app.SO1 = ['sanity bar lol.png',px,py,50,50]
   #obj2
   row = choice(range(5))
   col = choice(range(3))
   app.SO2Place = app.totalMap[row][col]
   px = choice(range(200,900))
   py= choice(range(200,900))
   app.SO2 = ['sanity bar lol.png',px,py,50,50]
   #obj3
   row = choice(range(5))
   col = choice(range(3))
   app.SO3Place = app.totalMap[row][col]
   px = choice(range(200,900))
   py= choice(range(200,900))
   app.SO3 = ['sanity bar lol.png',px,py,50,50]
   #obj4
   row = choice(range(5))
   col = choice(range(3))
   app.SO4Place = app.totalMap[row][col]
   px = choice(range(200,900))
   py= choice(range(200,900))
   app.SO4 = ['sanity bar lol.png',px,py,50,50]
   #obj5
   row = choice(range(5))
   col = choice(range(3))
   app.SO5Place = app.totalMap[row][col]
   px = choice(range(200,900))
   py= choice(range(200,900))
   app.SO5 = ['sanity bar lol.png',px,py,50,50]
   #obj6
   row = choice(range(5))
   col = choice(range(3))
   app.SO6Place = app.totalMap[row][col]
   px = choice(range(200,900))
   py= choice(range(200,900))
   app.SO6 = ['sanity bar lol.png',px,py,50,50]
   #obj7
   row = choice(range(5))
   col = choice(range(3))
   app.SO7Place = app.totalMap[row][col]
   px = choice(range(200,900))
   py= choice(range(200,900))
   app.SO7 = ['sanity bar lol.png',px,py,50,50]
   #obj8
   row = choice(range(5))
   col = choice(range(3))
   app.SO8Place = app.totalMap[row][col]
   px = choice(range(200,900))
   py= choice(range(200,900))
   app.SO8 = ['sanity bar lol.png',px,py,50,50]
   #obj9
   row = choice(range(5))
   col = choice(range(3))
   app.SO9Place = app.totalMap[row][col]
   px = choice(range(200,900))
   py= choice(range(200,900))
   app.SO9 = ['sanity bar lol.png',px,py,50,50]
   #obj10
   row = choice(range(5))
   col = choice(range(3))
   app.SO10Place = app.totalMap[row][col]
   px = choice(range(200,900))
   py= choice(range(200,900))
   app.SO10 = ['sanity bar lol.png',px,py,50,50]

#random functions
def objectsInRoom(app):
   print(app.see)
   if app.see == app.loc3_bedroom1_C:
      app.objectsInRoom = app.loc3CObjects
   elif app.see == app.loc4_bedroom2_A:
      app.objectsInRoom = app.loc4AObjects
   elif app.see == app.loc5_study_B:
      app.objectsInRoom = app.loc5BObjects
   elif app.see == app.loc3_bedroom1_D:
      app.objectsInRoom = app.loc3DObjects
   elif app.see == app.loc5_study_D:
      app.objectsInRoom = app.loc5DObjects
   elif app.see == app.loc2_kitchen_D:
      app.objectsInRoom=app.loc2DObjects
   else:
      app.objectsInRoom = []
def displayDogInteract(app):
   app.objectsInRoom += [app.piece1]
   app.loc4CObjects += [app.piece1] 
   app.player.itemsStored.remove(app.Dtreat)
   app.objectChoice = None
def locationToSee(app,numLoc,keyPressed,currSide):
   #initializing string to reference
   roomOrder = 'ABCD'
   roomInd = roomOrder.find(currSide)
   if keyPressed == 'right':
      roomInd +=1
      roomInd = roomInd%4
   elif keyPressed == 'left':
      roomInd -=1
      roomInd = roomInd%4
   resString = 'loc'
   resString += str(numLoc)
   resString += '_'
   if numLoc == 1:
      resString += 'secRoom_'
   elif numLoc == 2:
      resString += 'kitchen_'
   elif numLoc == 3:
      resString += 'bedroom1_'
   elif numLoc == 4:
      resString += 'bedroom2_'
   elif numLoc == 5:
      resString += 'study_'
   elif numLoc == 6:
      resString += 'livingRoom_'
   resString += str(roomOrder[roomInd])
   #changing the room based on the string
   #secRoom
   if 'secRoom_A' in resString:
      app.currSide = 'A'
      return app.loc1_secRoom_A
   elif 'secRoom_B' in resString:
      app.currSide = 'B'
      return app.loc1_secRoom_B
   elif 'secRoom_C' in resString:
      app.currSide = 'C'
      return app.loc1_secRoom_C
   elif 'secRoom_D' in resString:
      app.currSide = 'D'
      return app.loc1_secRoom_D
   #kitchen
   elif 'kitchen_A' in resString:
      app.currSide = 'A'
      return app.loc2_kitchen_A
   elif 'kitchen_B' in resString:
      app.currSide = 'B'
      return app.loc2_kitchen_B
   elif 'kitchen_C' in resString:
      app.currSide = 'C'
      return app.loc2_kitchen_C
   elif 'kitchen_D' in resString:
      app.currSide = 'D'
      return app.loc2_kitchen_D
   #bedroom1
   elif  'bedroom1_A' in resString:
      app.currSide = 'A'
      return  app.loc3_bedroom1_A 
   elif  'bedroom1_B' in resString:
      app.currSide = 'B'
      return  app.loc3_bedroom1_B 
   elif  'bedroom1_C' in resString:
      app.currSide = 'C'
      return  app.loc3_bedroom1_C
   elif  'bedroom1_D' in resString:
      app.currSide = 'D'
      return  app.loc3_bedroom1_D
   #bedroom2
   elif 'bedroom2_A' in resString:
      app.currSide = 'A'
      print(app.loc4_bedroom2_A)
      return app.loc4_bedroom2_A
   elif 'bedroom2_B' in resString:
      app.currSide = 'B'
      print(app.loc4_bedroom2_B)
      return app.loc4_bedroom2_B
   elif 'bedroom2_C' in resString:
      app.currSide = 'C'
      print(app.loc4_bedroom2_C)
      return app.loc4_bedroom2_C
   elif 'bedroom2_D' in resString:
      app.currSide = 'D'
      print(app.loc4_bedroom2_D)
      return app.loc4_bedroom2_D
   #study
   elif 'study_A' in resString:
      app.currSide = 'A'
      return app.loc5_study_A
   elif 'study_B' in resString:
      app.currSide = 'B'
      return app.loc5_study_B
   elif 'study_C' in resString:
      app.currSide = 'C'
      return app.loc5_study_C
   elif 'study_D' in resString:
      app.currSide = 'D'
      return app.loc5_study_D
   #living room
   elif 'livingRoom_A' in resString:
      app.currSide = 'A'
      return app.loc6_livingRoom_A
   elif 'livingRoom_B' in resString:
      app.currSide = 'B'
      return app.loc6_livingRoom_B
   elif 'livingRoom_C' in resString:
      app.currSide = 'C'
      return app.loc6_livingRoom_C
   elif 'livingRoom_D' in resString:
      app.currSide = 'D'
      return app.loc6_livingRoom_D
def onKeyPress(app,key):
   if app.gameOver == True:
      if key == 'r':
         restartAll(app)
   else:
      if key == 'left':
         app.see = locationToSee(app,app.Plocation,'right',app.currSide)
         # app.Epath = app.yuh.enemyMove()
         # app.gameOver = checkGameOver(app.Erow,app.Ecol,app.Prow,app.Pcol)
         objectsInRoom(app)
      elif key == 'right':
         app.see = locationToSee(app,app.Plocation,'left',app.currSide)
         # app.Epath = app.yuh.enemyMove()
         # app.gameOver = checkGameOver(app.Erow,app.Ecol,app.Prow,app.Pcol)
         objectsInRoom(app)
      if key == 'up':
         (app.Prow,app.Pcol) = app.yuh.playerMove(app.currSide,app.map,app.Prow,app.Pcol)
         app.Plocation = app.map[app.Prow][app.Pcol]
         app.see = locationToSee(app,app.Plocation,'up',app.currSide)
         app.Epath = enemyMoves(app.map,app.Erow,app.Ecol,app.Prow,app.Pcol,[])
         app.gameOver = checkGameOver(app.Erow,app.Ecol,app.Prow,app.Pcol)
         print('isgameOver',app.gameOver)
         objectsInRoom(app)
def clickedOnIt(app,object):
   if object == app.convLens or object == app.concLens:
      app.haveLens = True
   #inventory-addable objects
   if app.see == app.loc5_study_B:
      app.loc5BObjects.remove(object)
      app.player.itemsStored.append(object)
   elif app.see == app.loc4_bedroom2_A:
      app.loc4AObjects.remove(object)
      app.player.itemsStored.append(object)
   elif app.see == app.loc3_bedroom1_D:
      app.loc3DObjects.remove(object)
      app.player.itemsStored.append(object)
   elif app.see == app.loc3_bedroom1_C:
      app.loc3CObjects.remove(object)
      app.player.itemsStored.append(object)
   elif app.see == app.loc5_study_D:
      app.loc5DObjects.remove(object)
      app.player.itemsStored.append(object)
   elif app.see == app.loc2_kitchen_D:
      app.loc2DObjects.remove(object)
      app.player.itemsStored.append(object)
   elif app.see == app.loc4_bedroom2_C:
      app.loc4CObjects.remove(object)
      app.objectsInRoom.remove(object)
      app.player.peicesStored.append(object)
def gameOverScreen(app):
   if app.gameOver == True:
      app.map = []

#checking if mouse is pressing these things
def mouseOnArrow(app,mx,my):
   if not app.gameOver:
      if 10<=mx<=70:
         if 405<= my <= 445:
            app.see = locationToSee(app,app.Plocation,'right',app.currSide)
            app.Epath = enemyMoves(app.map,app.Erow,app.Ecol,app.Prow,app.Pcol,[])
            print(app.Epath)
            app.gameOver = checkGameOver(app.Erow,app.Ecol,app.Prow,app.Pcol)
            objectsInRoom(app)
      elif 1101 <= mx <= 1159:
         if 400<= my <= 445: 
            app.see = locationToSee(app,app.Plocation,'left',app.currSide)
            app.Epath = enemyMoves(app.map,app.Erow,app.Ecol,app.Prow,app.Pcol,[])
            print(app.Epath)
            app.gameOver = checkGameOver(app.Erow,app.Ecol,app.Prow,app.Pcol)
            objectsInRoom(app)
      print(mx,my) 
def randomObjectInteraction(app,mx,my):
   pass 
def objectInteraction(app,mx,my):
   #the formulas for obtaining tings/unlocking tings
   if app.see == app.loc4_bedroom2_C:
      if 170<=mx<=430:
         if 360<=my<=760:
            if app.objectChoice[0] == app.Dtreat:
               if app.piece1 not in app.player.peicesStored:
                  displayDogInteract(app)
def randomObjectInteraction(app,mx,my):
   pass
def mouseOnLenses(app,mx,my):
   if 90<=my<=167:
      if 7<=mx<=90:
         app.lensChoice = 'none'
   elif 170<=my<=250:
      if 7<=mx<=90:
         if app.concLens in app.player.itemsStored:
            if app.convLens in app.player.itemsStored:
               if app.player.itemsStored.index(app.convLens) > app.player.itemsStored.index(app.concLens):
                  app.lensChoice = 'conc'
               else:
                  app.lensChoice = 'conv'
            else:
               app.lensChoice = 'conc'
         elif app.convLens in app.player.itemsStored:
            app.lensChoice = 'conv'
   elif 250<=my<=330:
      if 7<= mx<=90:
         if app.player.itemsStored.index(app.convLens) > app.player.itemsStored.index(app.concLens):
            app.lensChoice = 'conv'
         else:
            app.lensChoice = 'conc'
def clickInv(app,mx,my):
   if 7<=mx<=80:
      if 7<=my<=80:
         app.showInv = not app.showInv
         if app.showInv == False:
            app.objectChoice = None
def mouseOnInvObj(app,mx,my):
   if app.showInv == True:
      #checking if clicked on each square, if the square has an object,
      #then making it the object choice if selected, and deselecting if it is already
      
      #normal items
      #square 1
      if 80<=mx<=167:
         if 7<=my<=90:
            if len(app.player.itemsStored) >=1:
               app.objectChoice = [app.player.itemsStored[0],0]
      #square 2
      if 167<=mx<=250:
         if 7<=my<=90:
            if len(app.player.itemsStored) >=2:
               app.objectChoice = [app.player.itemsStored[1],1]
      #square 3
      if 250<=mx<=330:
         if 7<=my<=90:
            if len(app.player.itemsStored) >=3:
               app.objectChoice = [app.player.itemsStored[2],2]
      #square 4
      if 330<=mx<=407:
         if 7<=my<=90:
            if len(app.player.itemsStored) >=4:
               app.objectChoice = [app.player.itemsStored[3],3]
      #square 5
      if 407<=mx<=490:
         if 7<=my<=90:
            if len(app.player.itemsStored) >=5:
               app.objectChoice = [app.player.itemsStored[4],4]
      #square 6
      if 490<=mx<=567:
         if 7<=my<=90:
            if len(app.player.itemsStored) >=6:
               app.objectChoice = [app.player.itemsStored[5],5]
      #square 7
      if 567<=mx<=650:
         if 7<=my<=90:
            if len(app.player.itemsStored) >=7:
               app.objectChoice = [app.player.itemsStored[6],6]
      #square 8
      if 650<=mx<=730:
         if 7<=my<=90:
            if len(app.player.itemsStored) >=8:
               app.objectChoice = [app.player.itemsStored[7],7]

      #peices items (purple squares)
      #square1
      if 750<=mx<=830:
         if 7<=my<=90:
            if len(app.player.peicesStored) >=1:
               app.objectChoice = [app.player.peicesStored[0],8]
      #square2
      if 830<=mx<=910:
         if 7<=my<=90:
            if len(app.player.peicesStored) >=2:
               app.objectChoice = [app.player.peicessStored[1],9]
      #square3
      if 910<=mx<=990:
         if 7<=my<=90:
            if len(app.player.peicesStored) >=3:
               app.objectChoice = [app.player.peicessStored[2],10]
      #square4
      if 990<=mx<=1069:
         if 7<=my<=90:
            if len(app.player.peicesStored) >=4:
               app.objectChoice = [app.player.peicessStored[3],11]
      #square5
      if 1062<=mx<=1140:
         if 90<=my<=170:
            if len(app.player.peicesStored) >=5:
               app.objectChoice = [app.player.peicessStored[4],12]
   else:
      pass
def clickInv(app,mx,my):
   if 7<=mx<=80:
      if 7<=my<=80:
         app.showInv = not app.showInv
         if app.showInv == False:
            app.objectChoice = None
def mouseOnDoor(app,mx,my):
   if 500<=mx<=700:
      if 220<=my<=600:
         (app.Prow,app.Pcol) = app.yuh.playerMove(app.currSide,app.map,app.Prow,app.Pcol)
         app.Plocation = app.map[app.Prow][app.Pcol]
         app.see = locationToSee(app,app.Plocation,'up',app.currSide)
         app.Epath = enemyMoves(app.map,app.Erow,app.Ecol,app.Prow,app.Pcol,[])
         print(app.Epath)
         app.gameOver = checkGameOver(app.Erow,app.Ecol,app.Prow,app.Pcol)
         objectsInRoom(app)
def mouseOnObject(app,mx,my):
   for object in app.objectsInRoom:
      (image,x,y,w,h) = object
      if (x)<=mx<=(x+w):
         if (y)<=my<=(y+h):
            clickedOnIt(app,object)
def mouseOnSB(app,mx,my):
   if app.see == app.SO1Place:
      (image,x,y,w,h) = app.SO1
      if (x)<=mx<=(x+w):
         if (y)<=my<=(y+h):
            app.SO1Place = None
            print('yyyyyyyyyy')
            app.playerSanity+=10 
            if app.playerSanity >100:
               app.playerSanity = 100

   if app.see == app.SO2Place:
      (image,x,y,w,h) = app.SO2
      if (x)<=mx<=(x+w):
         if (y)<=my<=(y+h):
            app.SO2Place = None
            print('yyyyyyyyyy')
            app.playerSanity+=10 
            if app.playerSanity >100:
               app.playerSanity = 100
   if app.see == app.SO3Place:
         (image,x,y,w,h) = app.SO3
         if (x)<=mx<=(x+w):
            if (y)<=my<=(y+h):
               app.SO3Place = None
               print('yyyyyyyyyy')
               app.playerSanity+=10 
               if app.playerSanity >100:
                  app.playerSanity = 100
   if app.see == app.SO4Place:
      (image,x,y,w,h) = app.SO4
      if (x)<=mx<=(x+w):
         if (y)<=my<=(y+h):
            app.SO4Place = None
            print('yyyyyyyyyy')
            app.playerSanity+=10 
            if app.playerSanity >100:
               app.playerSanity = 100
   if app.see == app.SO5Place:
      (image,x,y,w,h) = app.SO5
      if (x)<=mx<=(x+w):
         if (y)<=my<=(y+h):
            app.SO5Place = None
            print('yyyyyyyyyy')
            app.playerSanity+=10 
            if app.playerSanity >100:
               app.playerSanity = 100
   if app.see == app.SO6Place:
      (image,x,y,w,h) = app.SO6
      if (x)<=mx<=(x+w):
         if (y)<=my<=(y+h):
            app.SO6Place = None
            print('yyyyyyyyyy')
            app.playerSanity+=10 
            if app.playerSanity >100:
               app.playerSanity = 100
   if app.see == app.SO7Place:
      (image,x,y,w,h) = app.SO7
      if (x)<=mx<=(x+w):
         if (y)<=my<=(y+h):
            app.SO7Place = None
            print('yyyyyyyyyy')
            app.playerSanity+=10 
            if app.playerSanity >100:
               app.playerSanity = 100
   if app.see == app.SO8Place:
      (image,x,y,w,h) = app.SO8
      if (x)<=mx<=(x+w):
         if (y)<=my<=(y+h):
            app.SO8Place = None
            print('yyyyyyyyyy')
            app.playerSanity+=10 
            if app.playerSanity >100:
               app.playerSanity = 100
   if app.see == app.SO9Place:
      (image,x,y,w,h) = app.SO9
      if (x)<=mx<=(x+w):
         if (y)<=my<=(y+h):
            app.SO9Place = None
            app.playerSanity+=10 
            if app.playerSanity >100:
               app.playerSanity = 100
      
   if app.see == app.SO10Place:
      (image,x,y,w,h) = app.SO10
      if (x)<=mx<=(x+w):
         if (y)<=my<=(y+h):
            app.playerSanity+=10 
            app.SO10Place = None
            if app.playerSanity >100:
               app.playerSanity = 100
#source mousePress stuff = hack112 project
def onMousePress(app,mouseX,mouseY):
   mouseOnArrow(app,mouseX,mouseY)
   mouseOnObject(app,mouseX,mouseY)
   clickInv(app,mouseX,mouseY)
   mouseOnLenses(app,mouseX,mouseY)
   mouseOnSB(app,mouseX,mouseY)
   if app.objectChoice !=None:
      objectInteraction(app,mouseX,mouseY)
   randomObjectInteraction(app,mouseX,mouseY)
   if app.showInv:
      mouseOnInvObj(app,mouseX,mouseY)
   if doorThere(app,app.map,app.Prow,app.Pcol,app.currSide):
      mouseOnDoor(app,mouseX,mouseY)

#source door image = iheartcraftythings.com
def doorThere(app,map,Prow,Pcol,currSide):
   if currSide == 'A':
      newRow = Prow-1
      if 0<= newRow < 3:
         if map[newRow][Pcol] != 0:
            return True
   elif currSide == 'B':
      newCol = Pcol-1
      if 0 <= newCol<3:
         if map[Prow][newCol] != 0:
            return True
   elif currSide == 'C':
      newRow = Prow +1  
      if 0<=newRow < 3:
         if map[newRow][Pcol] != 0:
               return True
   elif currSide == 'D':
      newCol = Pcol +1
      if 0<=newCol < 3:
         if map[Prow][newCol] != 0:
            return True
   return False

def onStep(app):
   print(app.timeCount)
   app.timeCount +=1
   if not app.gameOver:
      if app.timeCount%3 ==0:
         app.playerSanity -=1
         if app.playerSanity == 0:
            app.gameOver = True
      if app.timeCount%45 ==0:
         app.Erow = app.Epath[0][0]
         app.Ecol = app.Epath[0][1]
         app.Epath.pop(0)
         app.gameOver = checkGameOver(app.Erow,app.Ecol,app.Prow,app.Pcol)
   
def redrawAll(app):
   if app.gameOver == True:
      drawRect(0,0,1200,1000,fill='black')
      drawLabel('game Over :(', 500,300,fill='white',size=70)
      drawLabel('he caught u! oh nooo', 500,500,fill='white',size=70)
      drawLabel("press 'r' to restart", 500,700,fill='white',size=70)
   else:
      #drawing background
      drawImage(app.see,0,0,width=1200,height=1000)
      # drawImage('5793514.png',300,550,width=50,height=50) #TEST

      #drawing arrows
      drawImage('aluminum-arrow-sign-k-1777_bk.png',1100,400,width=60,height=50)
      drawImage('arrowflipppeed.png',10,400,width=60,height=50)

      #drawing door
      if doorThere(app,app.map,app.Prow,app.Pcol,app.currSide):
         drawImage('door bae .png', 500,220,width=200,height=400)

      #drawing items in room
      for object in app.objectsInRoom:
         (image,x,y,w,h) = object
         drawImage(image,x,y,width=w,height=h)
         
      #drawing sanity inc things
      if app.see == app.SO1Place:
         (image,x,y,w,h) = app.SO1
         drawImage(image,x,y,width=w,height=h)
      if app.see == app.SO2Place:
         (image,x,y,w,h) = app.SO2
         drawImage(image,x,y,width=w,height=h)
      if app.see == app.SO3Place:
         (image,x,y,w,h) = app.SO3
         drawImage(image,x,y,width=w,height=h)
      if app.see == app.SO4Place:
         (image,x,y,w,h) = app.SO4
         drawImage(image,x,y,width=w,height=h)
      if app.see == app.SO5Place:
         (image,x,y,w,h) = app.SO5
         drawImage(image,x,y,width=w,height=h)
      if app.see == app.SO6Place:
         (image,x,y,w,h) = app.SO6
         drawImage(image,x,y,width=w,height=h)
      if app.see == app.SO7Place:
         (image,x,y,w,h) = app.SO7
         drawImage(image,x,y,width=w,height=h)
      if app.see == app.SO8Place:
         (image,x,y,w,h) = app.SO8
         drawImage(image,x,y,width=w,height=h)
      if app.see == app.SO9Place:
         (image,x,y,w,h) = app.SO9
         drawImage(image,x,y,width=w,height=h)
      if app.see == app.SO10Place:
         (image,x,y,w,h) = app.SO10
         drawImage(image,x,y,width=w,height=h)
      #drawing inventory
      drawRect(7,7,80,80,fill='lightCoral',border='gray',borderWidth=4)
      if app.showInv == False:
         drawLabel('push here',48,30,size=15)
         drawLabel('for ur',48,50,size=15)
         drawLabel('inventory',48,70,size=15,bold=True)
      else:
         drawLabel('push here',48,30,size=15)
         drawLabel('to close da',48,50,size=15)
         drawLabel('inventory',48,70,size=15,bold=True)
         #all item boxes:
         for i in range(8):
            drawRect(87+i*80,7,80,80,fill='papayaWhip',border='gray',borderWidth=4)
         #boxes for key peices:
         for i in range(5):
            if i<4:
               drawRect(750+i*80,7,80,80,fill='purple',border='gray',borderWidth=4)
            else:
               drawRect(900+(i-2)*80,90,80,80,fill='purple',border='gray',borderWidth=4)
         count = 0
         #drawing items in inventory
         for item in app.player.itemsStored:
            if item != app.convLens and item != app.concLens:
               (image,x,y,w,h) = item
               drawImage(image,87+count*80,7,width=80,height=80)
               count+=1
         count=0
         #drawing peices in inventory
         for peice in app.player.peicesStored:
            if count != 4:
               (image,x,y,w,h) = peice
               drawImage(image,760+count*80,17,width=60,height=60)
            count+=1
         count = 0
         #drawing item selection
         if app.objectChoice != None:
            if app.objectChoice[1] == 0:
               drawRect(87,7,80,80,fill=None,border='lawnGreen',borderWidth=6)
               drawLabel('selected',137,96,size=12,fill='oliveDrab')
      #drawing Lens inventory
      if app.convLens in app.player.itemsStored or app.concLens in app.player.itemsStored:
         count2 = 0
         for item in app.player.itemsStored:
            if item == app.concLens or item == app.convLens:
               drawRect(7,170+count2*80,80,80,fill='steelBlue',border='gray',borderWidth=4)
               (image,x,y,w,h) = item
               drawImage(image,7+27,170+17+count2*80,width=w,height=h)
            count2+=1
         count2=0
         drawRect(7,90,80,80,fill='darkSeaGreen',border='gray',borderWidth=4)
         drawLabel('no',47,120,size=18,bold=True)
         drawLabel('lens',47,140,size=18,bold=True)
         if app.lensChoice == 'none':
            drawRect(7,90,80,80,fill=None,border='gold',borderWidth=6)
            drawLabel('selected',45,160,size=12,fill='black')
         elif app.lensChoice == 'conc':
            if app.convLens in app.player.itemsStored:
               if app.player.itemsStored.index(app.convLens) > app.player.itemsStored.index(app.concLens):
                  drawRect(7,170,80,80,fill=None,border='gold',borderWidth=6)
                  drawLabel('selected',45,240,size=12,fill='black')
               else:
                  drawRect(7,250,80,80,fill=None,border='gold',borderWidth=6)
                  drawLabel('selected',45,320,size=12,fill='black')
            else:
               drawRect(7,250,80,80,fill=None,border='gold',borderWidth=6)
               drawLabel('selected',45,320,size=12,fill='black')
         elif app.lensChoice == 'conv':
            if app.concLens in app.player.itemsStored:
               if app.player.itemsStored.index(app.convLens) < app.player.itemsStored.index(app.concLens):
                  drawRect(7,170,80,80,fill=None,border='gold',borderWidth=6)
                  drawLabel('selected',45,240,size=12,fill='black')
               else:
                  drawRect(7,250,80,80,fill=None,border='gold',borderWidth=6)
                  drawLabel('selected',45,320,size=12,fill='black')
            else:
               drawRect(7,170,80,80,fill=None,border='gold',borderWidth=6)
               drawLabel('selected',45,240,size=12,fill='black')
      
      #drawing map on top of screen
      for i in range(3):
         for j in range(3):
            if app.map[i][j] != 0:
               drawRect(1100+(30*j),20+(30*i),30,30,fill = 'papayaWhip',border='gray')
      for i in range(3):
         for j in range(3):
            if i == app.Prow and j == app.Pcol:
               drawRect(1100+(30*j)+8,20+30*i+8,15,15,fill = 'lime',border='darkKhaki')
               if app.currSide == 'A':
                  drawRect(1100+(30*j)+8,20+30*i+3,15,5,fill = 'brown')   
               elif app.currSide == 'B':
                  drawRect(1100+(30*j)+3,20+30*i+8,5,15,fill = 'brown')
               elif app.currSide == 'C':
                  drawRect(1100+(30*j)+8,20+30*i+23,15,5,fill = 'brown')  
               elif app.currSide == 'D':
                  drawRect(1100+(30*j)+23,20+30*i+8,5,15,fill = 'brown')
            #draws enemy's position if the player has the tracker 
            elif i == app.Erow and j == app.Ecol and app.tracker == True:
               drawRect(1100+(30*j)+8,20+30*i+8,15,15,fill = 'red',border='mediumBlue')
      #drawing sanity meter
      drawLabel('sanity meter :0',1140,140,size=15)
      for i in range(100):
         drawRect(1160,150+i*2,7,7,fill='peachPuff')
      for i in range(app.playerSanity):
         drawRect(1160,350-i*2,7,7,fill='mediumSeaGreen')
def main():
    runApp(width=1200,height=1000)

main()
