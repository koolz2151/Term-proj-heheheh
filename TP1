import random
from cmu_graphics import *

#objects
class objects:
  def __init__(self):
    #normal objects
    self.hammer = 0
    self.wrench = None
    self.BSkey = None
    self.convLens = None
    self.concLens = None
    self.Dtreat = None
    self.normItemsList = [self.hammer,self.wrench,self.BSkey,self.convLens,self.concLens,self.Dtreat]
    self.silverKey = 0
    self.bronzeKey = None
    self.peices = []
    self.goldKey = None
    self.tracker = None
    self.secretItemsList = [self.silverKey,self.bronzeKey,self.peices,self.goldKey,self.tracker]

  #there are 6 normal objects and 4 secret objects(with an additional 5 peices you need to find)
  def placeSecretObjects(self):
    peices = []
    itemDict = {'silverKey':0,'bronzeKey':0,'peices':None,'goldKey':0,'tracker':0}
    possibleNums = list(range(9))
    #giving each item a random position 0-9, representing a spot 
    for item in itemDict:
      if item == 'peices':
        toAdd = []
        for _ in range(5):
            number = choice(possibleNums)
            toAdd.append(number)
            possibleNums.remove(number)
        itemDict['peices'] = toAdd
      else:
        number = choice(possibleNums)
        itemDict[item] = number
        possibleNums.remove(number)
    self.peices = itemDict['peices']
    self.silverKey = itemDict['silverKey']
    self.bronzeKey = itemDict['bronzeKey']
    self.goldKey = itemDict['goldKey']
    self.tracker = itemDict['tracker']
  def placeNormObjects(self):
    self.itemDict = {'hammer':0,'wrench':0,'BSkey':0,'convLens':0,'concLens':0,'Dtreat':0}
    possibleNums = list(range(6))
    #giving each item a random position 0-6, representing a spot 
    for item in self.itemDict:
      number = choice(possibleNums)
      self.itemDict[item] = number
      possibleNums.remove(number)
    self.hammer = self.itemDict['hammer']
    self.wrench = self.itemDict['wrench']
    self.BSkey = self.itemDict['BSkey']
    self.convLens = self.itemDict['convLens']
    self.concLens = self.itemDict['concLens']
    self.Dtreat = self.itemDict['Dtreat']
  def allNorms(self):
     res = []
     print(self.itemDict)

class playerhehe:
   def __init__(self):
      self.itemsStored = []
      self.itemHeld = None

   def pickup(self,item):
      self.itemsStored.append(item)
   
   def holdItem(self, item):
      self.itemHeld = item

   def releaseItem(self):
      self.itemHeld = None

   def itemHeld(self):
      return self.itemHeld
   
   def giveInventory(self):
      return self.itemsStored 

   def useItem(self,item,location):
      # if item == app.dogTreat:
      #    if location == 
      pass
   pass

def createMap():
  theMap = [[0,0,0],
            [0,0,0],
            [0,0,0]] #(empty), 9 cells total
  # the numbered positions for reference are: 
  mapNumRef = [[0,1,2],
               [3,4,5],
               [6,7,8]]
  theOptions = list(range(8))
  count = 6 
  rows = 2
  cols = 2
  tries = 0
  while count > 0:
    place = choice(theOptions)
    if place == 0:
      row = 0
      col = 0
    elif place%3 == 0:
        row = (place//3)
        col = place-(place//3)*3
    else:
        row =place//3
        col = (place)-(place//3)*3
    theMap[row][col] = 1
    check = []
    # (row+1,col), (row+1,col+1), (row+1,col-1), (row,col+1),(row,col-1),(row-1,col),(row-1,col-1),(row-1,col+2)
    if count >= 3:
       check = [1]
    else:
        for i in range(3):
           if i == 1:
              continue
           if 0<= (col-1 + i) <= cols:
                if theMap[row][col-1 + i] == 1:
                    check.append(1)
           if 0<= (row-1+i) <= rows:
                if theMap[row-1 +i][col] ==1:
                    check.append(1)
           else:
             continue
    if len(check) >= 1 and count > 2:
       count -=1
       theOptions.remove(place)
    #so that at least two of the rooms are connected to two other rooms 
    elif count <= 2 and len(check) >=2:
       count -=1
       theOptions.remove(place)
    #since this map below and its mirror wouldn't be ideal to evade the enemy   
    elif count ==1 and (theMap == [[1,1,1],[1,0,0],[1,1,0]] or theMap == [[0,1,1],[1,1,0],[0,1,1]]):
       theMap[row][col] = 0
    elif tries >= 20:
        theMap = [[0,0,0],[0,0,0],[0,0,0]]
        count = 6
        theOptions = list(range(8))
    else:
       theMap[row][col] = 0
       tries +=1 
  return theMap

def defineMap(map):
   #notes: room1 = secret room, room 2 = kitchen, room 3 = bedroom 1, room 4 = bedroom 2
   #room 5 = study, room 6 = living room
   theOptions = list(range(7))
   theOptions.remove(0)
   for row in range(3):
      for col in range(3):
         if map[row][col] == 1:
            place = choice(theOptions)
            map[row][col] = place
            theOptions.remove(place)
   return map
            
   

class Enemy:
    #when game starts, the enemy is in the secret room
    def __init__(self,map):
       self.map = map
       for i in range(3):
          for j in range(3):
             if map[i][j] == 1:
                self.Erow = i
                self.Ecol = j
       for i in range(3):
          for j in range(3):
             if i != self.Erow and j != self.Ecol:
                #placing player randomly where the enemy isn't at
                if map[i][j] != 0:
                   self.Prow = i
                   self.Pcol = j    
    def placement(self):
       return([[self.Prow,self.Pcol],[self.Erow,self.Ecol]])
    def stepping(self):
       pass
#        #bfs backtracking - source = tpguide pathfinding and 
#        #    https://favtutor.com/blogs/breadth-first-search-python#:~:text=Breadth%2DFirst%20Search%20is%20a,graph%20is%20almost%20the%20same.
#        start = [self.Erow,self.Ecol]
#        end = [self.Prow,self.Pcol]
#        rest = []
#        for i in range(3):
#           for j in range(3):
#              if self.map[i][j] != 0 and [i,j] != start:
#                 rest.append([i,j])
#        visited = []
#        theDict = {'A':start}
#        lets = ['B','C','D','E','F']
#        for i in range(5):
#           theDict[lets[i]] = rest[i]
#        print(theDict)
#        pathDict = {'A':theDict['A'],'B':None,'C':None,'D':None,'E':None,'F':None}
#        resDict = createDict(theDict,start,'A',{},end)
#        print(resDict,'RESDICKKK')
# def createDict(theDict,checkVal,checkLett,resDict,end):
#    print('dis dick ', theDict, 'not dick', resDict,'end',end)
#    if theDict == []:
#        return {}
#    else:
#       for letter in theDict:
#          print(theDict[letter],letter)
#          if theDict[letter] == end:
#             print('yuhfha')
#             return resDict
#          checkRow = theDict[letter][0]
#          checkCol = theDict[letter][1]
#          if letter != checkLett:
#             if checkRow+1 == checkVal[0] or checkRow-1 == checkVal[0] or checkRow == checkVal[0]:
#                if checkCol +1 == checkVal[1] or checkCol-1 == checkVal[1] or checkCol == checkVal[1]:
#                   resDict[checkLett] = resDict.get(checkLett,'') + letter
#                   theDict.pop(letter)
#                   # print(theDict,theDict[letter],resDict)
#                   ressDict = resDict|(createDict(theDict,[checkRow,checkVal],letter,resDict,end))
#                   if ressDict == None:
#                      resDict.pop(letter)
                  
#       return None
                
      #  visited.append(start)
      #  while rest != []:
          


     
##### tests ######
# tempMap = createMap()
# print(tempMap)
# map = defineMap(tempMap)
# theRun = objects()
# theRun.placeNormObjects()
# theRun.placeSecretObjects()
# print(theRun.peices)

#room graphics :,)
#living room 
#side A = couch(use conv. lens to get secret item ), sideB = dogHouse(normal item), side C = TV, side D = scary painting(use conc. lens to get code) 

#main graphics control
def onAppStart(app):
   tempMap = createMap()
   realMap = defineMap(tempMap)
   print(realMap)
   app.map = realMap
   app.player = playerhehe()
   yuh = Enemy(realMap)
   yuh.stepping()
   app.Prow = -1
   app.Pcol = -1
   (app.Prow,app.Pcol) = yuh.placement()[0] 
   (app.Erow,app.Ecol) = yuh.placement()[1]
   app.objects = objects()
   app.objects.placeSecretObjects()
   app.objects.placeNormObjects()
   app.objects.allNorms()


   #initialized things
   app.tracker = True
    
   #initialized graphics - source  for creating graphics with images = hack112 project
   #rooms
   #loc 1
   app.loc1_secRoom_A = 'Screen Shot 2023-04-17 at 10.03.26 AM.png'
   app.loc1_secRoom_B = 'Screen Shot 2023-04-17 at 9.23.03 AM.png'
   app.loc1_secRoom_C = 'Screen Shot 2023-04-17 at 9.23.06 AM.png'
   app.loc1_secRoom_D = 'Screen Shot 2023-04-17 at 9.23.10 AM.png'
   #loc 2
   app.loc2_kitchen_A = 'Screen Shot 2023-04-17 at 9.23.03 AM.png'
   app.loc2_kitchen_B = 'Screen Shot 2023-04-17 at 9.23.03 AM.png'
   app.loc2_kitchen_C = 'Screen Shot 2023-04-17 at 9.23.06 AM.png'
   app.loc2_kitchen_D = 'Screen Shot 2023-04-17 at 9.23.10 AM.png'
   #loc 3
   app.loc3_bedroom1_A = 'Screen Shot 2023-04-17 at 10.03.44 AM.png'
   app.loc3_bedroom1_B = 'Screen Shot 2023-04-17 at 9.23.03 AM.png'
   app.loc3_bedroom1_C = 'Screen Shot 2023-04-17 at 9.23.06 AM.png'
   app.loc3_bedroom1_D = 'Screen Shot 2023-04-17 at 9.23.10 AM.png'
   #loc 4
   app.loc4_bedroom2_A = ''
   app.loc4_bedroom2_B = 'Screen Shot 2023-04-17 at 9.23.03 AM.png'
   app.loc4_bedroom2_C = 'Screen Shot 2023-04-17 at 9.23.06 AM.png'
   app.loc4_bedroom2_D = 'Screen Shot 2023-04-17 at 9.23.10 AM.png'
   #loc 5
   app.loc5_study_A = 'Screen Shot 2023-04-17 at 10.03.50 AM.png'
   app.loc5_study_B = 'Screen Shot 2023-04-17 at 9.23.03 AM.png'
   app.loc5_study_C = 'Screen Shot 2023-04-17 at 9.23.06 AM.png'
   app.loc5_study_D = 'Screen Shot 2023-04-17 at 9.23.10 AM.png'
   #loc 6
   app.loc6_livingRoom_A = 'Screen Shot 2023-04-17 at 10.03.56 AM.png'
   app.loc6_livingRoom_B = 'Screen Shot 2023-04-17 at 9.23.03 AM.png'
   app.loc6_livingRoom_C = 'Screen Shot 2023-04-17 at 9.23.06 AM.png'
   app.loc6_livingRoom_D = 'Screen Shot 2023-04-17 at 9.23.10 AM.png'
   #clickable items in room
   #loc4 bedroom2
   app.loc4_sideA_NC_bed = 'Screen Shot 2023-04-17 at 9.22.04 AM.png' 
   app.loc4_sideA_C_bed = 'Screen Shot 2023-04-17 at 2.48.33 PM.png'
   app.bed = app.loc4_sideA_NC_bed
   #image source dog = https://www.nicepng.com/maxp/u2y3q8w7y3w7u2a9/
   app.loc4_sideB_doggy = '958-9582299_full-size-of-puppy-drawing-pages-cartoon-dog.png'


   #normal items
   #secret items
   #positions
   app.Plocation = app.map[app.Prow][app.Pcol]
   app.Elocation = app.map[app.Erow][app.Ecol]
   if app.Plocation == app.Elocation:
      app.gameOver = True
   else:
      app.gameOver = False
   app.currSide = 'A'
   app.see = locationToSee(app,app.Plocation,None,app.currSide)
   app.objectsInRoom = objectsInRoom(app,app.see)

def objectsInRoom(app,currLocation):
   if currLocation == app.loc4_bedroom2_A or currLocation == app.loc6_livingRoom_A:
      return [app.bed]
   else:
      return []
def locationToSee(app,numLoc,keyPressed,currSide):
   #initializing string to reference
   roomOrder = 'ABCD'
   roomInd = roomOrder.find(currSide)
   if keyPressed == 'right':
      roomInd +=1
      roomInd = roomInd%4
   elif keyPressed == 'left':
      roomInd -=1
      roomInd = roomInd%4
   resString = 'loc'
   resString += str(numLoc)
   resString += '_'
   if numLoc == 1:
      resString += 'secRoom_'
   elif numLoc == 2:
      resString += 'kitchen_'
   elif numLoc == 3:
      resString += 'bedroom1_'
   elif numLoc == 4:
      resString += 'bedroom2_'
   elif numLoc == 5:
      resString += 'study_'
   elif numLoc == 6:
      resString += 'livingRoom_'
   resString += str(roomOrder[roomInd])
   #changing the room based on the string
   #secRoom
   if 'secRoom_A' in resString:
      app.currSide = 'A'
      return app.loc1_secRoom_A
   elif 'secRoom_B' in resString:
      app.currSide = 'B'
      return app.loc1_secRoom_B
   elif 'secRoom_C' in resString:
      app.currSide = 'C'
      return app.loc1_secRoom_C
   elif 'secRoom_D' in resString:
      app.currSide = 'D'
      return app.loc1_secRoom_D
   #kitchen
   elif 'kitchen_A' in resString:
      app.currSide = 'A'
      return app.loc2_kitchen_A
   elif 'kitchen_B' in resString:
      app.currSide = 'B'
      return app.loc2_kitchen_B
   elif 'kitchen_C' in resString:
      app.currSide = 'C'
      return app.loc2_kitchen_C
   elif 'kitchen_D' in resString:
      app.currSide = 'D'
      return app.loc2_kitchen_D
   #bedroom1
   elif  'bedroom1_A' in resString:
      app.currSide = 'A'
      return  app.loc3_bedroom1_A 
   elif  'bedroom1_B' in resString:
      app.currSide = 'B'
      return  app.loc3_bedroom1_B 
   elif  'bedroom1_C' in resString:
      app.currSide = 'C'
      return  app.loc3_bedroom1_C
   elif  'bedroom1_D' in resString:
      app.currSide = 'D'
      return  app.loc3_bedroom1_D
   #bedroom2
   elif 'bedroom2_A' in resString:
      app.currSide = 'A'
      print(app.loc4_bedroom2_A)
      return app.loc4_bedroom2_A
   elif 'bedroom2_B' in resString:
      app.currSide = 'B'
      print(app.loc4_bedroom2_B)
      return app.loc4_bedroom2_B
   elif 'bedroom2_C' in resString:
      app.currSide = 'C'
      print(app.loc4_bedroom2_C)
      return app.loc4_bedroom2_C
   elif 'bedroom2_D' in resString:
      app.currSide = 'D'
      print(app.loc4_bedroom2_D)
      return app.loc4_bedroom2_D
   #study
   elif 'study_A' in resString:
      app.currSide = 'A'
      return app.loc5_study_A
   elif 'study_B' in resString:
      app.currSide = 'B'
      return app.loc5_study_B
   elif 'study_C' in resString:
      app.currSide = 'C'
      return app.loc5_study_C
   elif 'study_D' in resString:
      app.currSide = 'D'
      return app.loc5_study_D
   #living room
   elif 'livingRoom_A' in resString:
      app.currSide = 'A'
      return app.loc6_livingRoom_A
   elif 'livingRoom_B' in resString:
      app.currSide = 'B'
      return app.loc6_livingRoom_B
   elif 'livingRoom_C' in resString:
      app.currSide = 'C'
      return app.loc6_livingRoom_C
   elif 'livingRoom_D' in resString:
      app.currSide = 'D'
      return app.loc6_livingRoom_D
   
def onKeyPress(app,key):
   if key == 'left':
      app.see = locationToSee(app,app.Plocation,'left',app.currSide)
   elif key == 'right':
      app.see = locationToSee(app,app.Plocation,'right',app.currSide)
#source mousePress stuff = hack112 project
def onMousePress(app,mouseX,mouseY):
   for object in app.objectsInRoom:
      pointOnObject(app,mouseX,mouseY,object)

def pointOnObject(app, mouseX, mouseY,object):
    Ox,Oy,sizeX,sizeY = objectParams(app,object)
    top = Oy
    bottom = Oy+sizeY
    left = Ox
    right = Ox+sizeX
    if(left <= mouseX <= right) and (top <= mouseY <= bottom): 
      if object == dog:
         if app.player.itemHeld() == app.dogTreat:
            print('yuh')

      #opening/closing the bed on bedroom2 side A
      if object == app.loc4_sideA_NC_bed:
         app.bed = app.loc4_sideA_C_bed
         app.objectsInRoom = objectsInRoom(app,app.see)
      elif object == app.loc4_sideA_C_bed:
         app.bed = app.loc4_sideA_NC_bed
         app.objectsInRoom = objectsInRoom(app,app.see)

def objectParams(app,object):
   print('APP.BED',app.bed,'OBHECT',object)
   if object == app.bed:
      return (400,500,700,50)

def redrawAll(app):
   #drawing background
   drawImage(app.see,0,0,width=1200,height=1000)
   #drawing items in room
   if app.objectsInRoom != []:
      for object in app.objectsInRoom:
         Ox,Oy,sizeX,sizeY = objectParams(app,object)
         print('yuass')
         drawImage(object,Ox,Oy,width = sizeX,height=sizeY)
   #drawing map on top of screen
   for i in range(3):
      for j in range(3):
         if app.map[i][j] != 0:
            drawRect(1100+(30*j),20+(30*i),30,30,fill = 'papayaWhip',border='gray')
   for i in range(3):
      for j in range(3):
         if i == app.Prow and j == app.Pcol:
            drawRect(1100+(30*j)+8,20+30*i+8,15,15,fill = 'lime',border='darkKhaki')
         #draws enemy's position if the player has the tracker 
         elif i == app.Erow and j == app.Ecol and app.tracker == True:
            drawRect(1100+(30*j)+8,20+30*i+8,15,15,fill = 'red',border='mediumBlue')

def main():
    runApp(width=1200,height=1000)

main()
